// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#ifndef WINRT_Microsoft_Graphics_Canvas_UI_Xaml_0_H
#define WINRT_Microsoft_Graphics_Canvas_UI_Xaml_0_H
WINRT_EXPORT namespace winrt::Microsoft::Graphics::Canvas
{
    enum class CanvasAlphaMode : int32_t;
    struct CanvasDevice;
    struct CanvasDrawingSession;
    struct CanvasSwapChain;
    struct ICanvasResourceCreator;
    struct ICanvasResourceCreatorWithDpi;
}
WINRT_EXPORT namespace winrt::Microsoft::Graphics::Canvas::UI
{
    struct CanvasCreateResourcesEventArgs;
    struct CanvasTimingInformation;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct EventRegistrationToken;
    struct IAsyncAction;
    struct Rect;
    struct Size;
    template <typename TSender, typename TResult> struct WINRT_IMPL_EMPTY_BASES TypedEventHandler;
}
WINRT_EXPORT namespace winrt::Windows::Graphics::Imaging
{
    struct BitmapSize;
}
WINRT_EXPORT namespace winrt::Windows::UI
{
    struct Color;
}
WINRT_EXPORT namespace winrt::Windows::UI::Core
{
    struct CoreIndependentInputSource;
    enum class CoreInputDeviceTypes : uint32_t;
    struct DispatchedHandler;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Media::Imaging
{
    struct VirtualSurfaceImageSource;
}
WINRT_EXPORT namespace winrt::Microsoft::Graphics::Canvas::UI::Xaml
{
    struct ICanvasAnimatedControl;
    struct ICanvasAnimatedDrawEventArgs;
    struct ICanvasAnimatedDrawEventArgsFactory;
    struct ICanvasAnimatedUpdateEventArgs;
    struct ICanvasAnimatedUpdateEventArgsFactory;
    struct ICanvasControl;
    struct ICanvasDrawEventArgs;
    struct ICanvasDrawEventArgsFactory;
    struct ICanvasImageSource;
    struct ICanvasImageSourceFactory;
    struct ICanvasRegionsInvalidatedEventArgs;
    struct ICanvasSwapChainPanel;
    struct ICanvasVirtualControl;
    struct ICanvasVirtualImageSource;
    struct ICanvasVirtualImageSourceFactory;
    struct CanvasAnimatedControl;
    struct CanvasAnimatedDrawEventArgs;
    struct CanvasAnimatedUpdateEventArgs;
    struct CanvasControl;
    struct CanvasDrawEventArgs;
    struct CanvasImageSource;
    struct CanvasRegionsInvalidatedEventArgs;
    struct CanvasSwapChainPanel;
    struct CanvasVirtualControl;
    struct CanvasVirtualImageSource;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasSwapChainPanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedControl>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedDrawEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedUpdateEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasImageSource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasSwapChainPanel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedControl> = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedDrawEventArgs> = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedUpdateEventArgs> = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl> = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs> = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasImageSource> = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs> = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasSwapChainPanel> = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl> = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource> = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl> = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs> = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgsFactory> = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs> = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgsFactory> = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl> = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs> = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgsFactory> = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource> = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSourceFactory> = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs> = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasSwapChainPanel> = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl> = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource> = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSourceFactory> = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl>{ 0x9BD47D0D,0xD57D,0x43B7,{ 0x82,0xCB,0x48,0x9C,0xC5,0x66,0xE8,0x87 } }; // 9BD47D0D-D57D-43B7-82CB-489CC566E887
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs>{ 0xBC01FF4D,0xFF6C,0x4D4D,{ 0xA9,0xE9,0x8E,0xEB,0x21,0x39,0xF2,0x3F } }; // BC01FF4D-FF6C-4D4D-A9E9-8EEB2139F23F
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgsFactory>{ 0xC0C8FDAC,0x0DFC,0x4E18,{ 0xA6,0xE9,0x9E,0xF7,0xDC,0x82,0xBC,0xC2 } }; // C0C8FDAC-0DFC-4E18-A6E9-9EF7DC82BCC2
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs>{ 0xA96B2B2A,0x0C6E,0x4AA8,{ 0x92,0x5B,0x71,0x37,0x26,0x3B,0x4E,0x44 } }; // A96B2B2A-0C6E-4AA8-925B-7137263B4E44
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgsFactory>{ 0x766F4867,0xB22A,0x464B,{ 0x89,0xB1,0x0D,0xA6,0xAB,0x62,0xBE,0x68 } }; // 766F4867-B22A-464B-89B1-0DA6AB62BE68
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl>{ 0xF006E06D,0x79DB,0x484F,{ 0xB8,0x98,0x47,0x9C,0xF0,0x69,0xC0,0xF5 } }; // F006E06D-79DB-484F-B898-479CF069C0F5
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs>{ 0xFB86169F,0x25D4,0x4551,{ 0xBD,0x8F,0x21,0x4B,0xEA,0xF0,0xAC,0x24 } }; // FB86169F-25D4-4551-BD8F-214BEAF0AC24
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgsFactory>{ 0x7299D72C,0xF8E4,0x4A2F,{ 0x9E,0x30,0x7C,0xDF,0xCC,0xF3,0x1C,0x44 } }; // 7299D72C-F8E4-4A2F-9E30-7CDFCCF31C44
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource>{ 0x3C35E87A,0xE881,0x4F44,{ 0xB0,0xD1,0x55,0x14,0x13,0xAE,0xC6,0x6D } }; // 3C35E87A-E881-4F44-B0D1-551413AEC66D
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSourceFactory>{ 0x8596BEDD,0xD7F7,0x4C6B,{ 0xB1,0xAD,0x41,0x94,0x90,0x35,0xE0,0x84 } }; // 8596BEDD-D7F7-4C6B-B1AD-41949035E084
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs>{ 0x3A21A204,0xF52F,0x4E7A,{ 0x9B,0x3F,0x94,0x66,0x98,0x19,0xD9,0x81 } }; // 3A21A204-F52F-4E7A-9B3F-94669819D981
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasSwapChainPanel>{ 0xDBDCCB96,0x147E,0x4A82,{ 0xAF,0x3A,0xC9,0x1C,0x78,0x00,0xDA,0xA7 } }; // DBDCCB96-147E-4A82-AF3A-C91C7800DAA7
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl>{ 0x3C2B5177,0x7C61,0x41D2,{ 0x95,0xAE,0xFC,0xFC,0x92,0xFD,0x61,0x7A } }; // 3C2B5177-7C61-41D2-95AE-FCFC92FD617A
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource>{ 0xDF342987,0x4FE6,0x4BCD,{ 0xB8,0x85,0x2A,0xD3,0xE6,0xEF,0x9F,0xCE } }; // DF342987-4FE6-4BCD-B885-2AD3E6EF9FCE
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSourceFactory>{ 0x2FE755A1,0x307A,0x4623,{ 0x92,0x50,0x29,0x59,0x04,0x85,0xBD,0xB6 } }; // 2FE755A1-307A-4623-9250-29590485BDB6
    template <> struct default_interface<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedControl>{ using type = winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl; };
    template <> struct default_interface<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedDrawEventArgs>{ using type = winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedUpdateEventArgs>{ using type = winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl>{ using type = winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl; };
    template <> struct default_interface<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs>{ using type = winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasImageSource>{ using type = winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource; };
    template <> struct default_interface<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs>{ using type = winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasSwapChainPanel>{ using type = winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasSwapChainPanel; };
    template <> struct default_interface<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl>{ using type = winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl; };
    template <> struct default_interface<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource>{ using type = winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource; };
    template <> struct abi<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall add_CreateResources(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CreateResources(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Update(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Update(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Draw(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Draw(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_GameLoopStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_GameLoopStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_GameLoopStopped(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_GameLoopStopped(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_ReadyToDraw(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFixedTimeStep(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsFixedTimeStep(bool*) noexcept = 0;
            virtual int32_t __stdcall put_TargetElapsedTime(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_TargetElapsedTime(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_Paused(bool) noexcept = 0;
            virtual int32_t __stdcall get_Paused(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ClearColor(struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall get_ClearColor(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall get_Size(winrt::Windows::Foundation::Size*) noexcept = 0;
            virtual int32_t __stdcall Invalidate() noexcept = 0;
            virtual int32_t __stdcall ResetElapsedTime() noexcept = 0;
            virtual int32_t __stdcall CreateCoreIndependentInputSource(uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall RemoveFromVisualTree() noexcept = 0;
            virtual int32_t __stdcall get_HasGameLoopThreadAccess(bool*) noexcept = 0;
            virtual int32_t __stdcall RunOnGameLoopThreadAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall get_UseSharedDevice(bool*) noexcept = 0;
            virtual int32_t __stdcall put_UseSharedDevice(bool) noexcept = 0;
            virtual int32_t __stdcall get_ForceSoftwareRenderer(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ForceSoftwareRenderer(bool) noexcept = 0;
            virtual int32_t __stdcall get_CustomDevice(void**) noexcept = 0;
            virtual int32_t __stdcall put_CustomDevice(void*) noexcept = 0;
            virtual int32_t __stdcall get_DpiScale(float*) noexcept = 0;
            virtual int32_t __stdcall put_DpiScale(float) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DrawingSession(void**) noexcept = 0;
            virtual int32_t __stdcall get_Timing(struct struct_Microsoft_Graphics_Canvas_UI_CanvasTimingInformation*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, struct struct_Microsoft_Graphics_Canvas_UI_CanvasTimingInformation, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Timing(struct struct_Microsoft_Graphics_Canvas_UI_CanvasTimingInformation*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Create(struct struct_Microsoft_Graphics_Canvas_UI_CanvasTimingInformation, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall add_CreateResources(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CreateResources(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_ReadyToDraw(bool*) noexcept = 0;
            virtual int32_t __stdcall add_Draw(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Draw(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall put_ClearColor(struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall get_ClearColor(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall Invalidate() noexcept = 0;
            virtual int32_t __stdcall get_Size(winrt::Windows::Foundation::Size*) noexcept = 0;
            virtual int32_t __stdcall RemoveFromVisualTree() noexcept = 0;
            virtual int32_t __stdcall get_UseSharedDevice(bool*) noexcept = 0;
            virtual int32_t __stdcall put_UseSharedDevice(bool) noexcept = 0;
            virtual int32_t __stdcall get_ForceSoftwareRenderer(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ForceSoftwareRenderer(bool) noexcept = 0;
            virtual int32_t __stdcall get_CustomDevice(void**) noexcept = 0;
            virtual int32_t __stdcall put_CustomDevice(void*) noexcept = 0;
            virtual int32_t __stdcall get_DpiScale(float*) noexcept = 0;
            virtual int32_t __stdcall put_DpiScale(float) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DrawingSession(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateDrawingSession(struct struct_Windows_UI_Color, void**) noexcept = 0;
            virtual int32_t __stdcall CreateDrawingSessionWithUpdateRectangle(struct struct_Windows_UI_Color, winrt::Windows::Foundation::Rect, void**) noexcept = 0;
            virtual int32_t __stdcall Recreate(void*) noexcept = 0;
            virtual int32_t __stdcall get_Size(winrt::Windows::Foundation::Size*) noexcept = 0;
            virtual int32_t __stdcall get_SizeInPixels(struct struct_Windows_Graphics_Imaging_BitmapSize*) noexcept = 0;
            virtual int32_t __stdcall get_AlphaMode(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSourceFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateWithSize(void*, winrt::Windows::Foundation::Size, void**) noexcept = 0;
            virtual int32_t __stdcall CreateWithWidthAndHeight(void*, float, float, void**) noexcept = 0;
            virtual int32_t __stdcall CreateWithWidthAndHeightAndDpi(void*, float, float, float, void**) noexcept = 0;
            virtual int32_t __stdcall CreateWithWidthAndHeightAndDpiAndAlphaMode(void*, float, float, float, int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_InvalidatedRegions(uint32_t* __valueSize, winrt::Windows::Foundation::Rect**) noexcept = 0;
            virtual int32_t __stdcall get_VisibleRegion(winrt::Windows::Foundation::Rect*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasSwapChainPanel>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall put_SwapChain(void*) noexcept = 0;
            virtual int32_t __stdcall get_SwapChain(void**) noexcept = 0;
            virtual int32_t __stdcall RemoveFromVisualTree() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall add_CreateResources(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CreateResources(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_ReadyToDraw(bool*) noexcept = 0;
            virtual int32_t __stdcall add_RegionsInvalidated(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RegionsInvalidated(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall put_ClearColor(struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall get_ClearColor(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall CreateDrawingSession(winrt::Windows::Foundation::Rect, void**) noexcept = 0;
            virtual int32_t __stdcall SuspendDrawingSession(void*) noexcept = 0;
            virtual int32_t __stdcall ResumeDrawingSession(void*) noexcept = 0;
            virtual int32_t __stdcall Invalidate() noexcept = 0;
            virtual int32_t __stdcall InvalidateRegion(winrt::Windows::Foundation::Rect) noexcept = 0;
            virtual int32_t __stdcall get_Size(winrt::Windows::Foundation::Size*) noexcept = 0;
            virtual int32_t __stdcall RemoveFromVisualTree() noexcept = 0;
            virtual int32_t __stdcall get_UseSharedDevice(bool*) noexcept = 0;
            virtual int32_t __stdcall put_UseSharedDevice(bool) noexcept = 0;
            virtual int32_t __stdcall get_ForceSoftwareRenderer(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ForceSoftwareRenderer(bool) noexcept = 0;
            virtual int32_t __stdcall get_CustomDevice(void**) noexcept = 0;
            virtual int32_t __stdcall put_CustomDevice(void*) noexcept = 0;
            virtual int32_t __stdcall get_DpiScale(float*) noexcept = 0;
            virtual int32_t __stdcall put_DpiScale(float) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall CreateDrawingSession(struct struct_Windows_UI_Color, winrt::Windows::Foundation::Rect, void**) noexcept = 0;
            virtual int32_t __stdcall SuspendDrawingSession(void*) noexcept = 0;
            virtual int32_t __stdcall ResumeDrawingSession(void*) noexcept = 0;
            virtual int32_t __stdcall Invalidate() noexcept = 0;
            virtual int32_t __stdcall InvalidateRegion(winrt::Windows::Foundation::Rect) noexcept = 0;
            virtual int32_t __stdcall RaiseRegionsInvalidatedIfAny() noexcept = 0;
            virtual int32_t __stdcall add_RegionsInvalidated(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RegionsInvalidated(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ResizeWithSize(winrt::Windows::Foundation::Size) noexcept = 0;
            virtual int32_t __stdcall ResizeWithWidthAndHeight(float, float) noexcept = 0;
            virtual int32_t __stdcall ResizeWithWidthAndHeightAndDpi(float, float, float) noexcept = 0;
            virtual int32_t __stdcall Recreate(void*) noexcept = 0;
            virtual int32_t __stdcall get_Size(winrt::Windows::Foundation::Size*) noexcept = 0;
            virtual int32_t __stdcall get_SizeInPixels(struct struct_Windows_Graphics_Imaging_BitmapSize*) noexcept = 0;
            virtual int32_t __stdcall get_AlphaMode(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSourceFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateWithSize(void*, winrt::Windows::Foundation::Size, void**) noexcept = 0;
            virtual int32_t __stdcall CreateWithWidthAndHeight(void*, float, float, void**) noexcept = 0;
            virtual int32_t __stdcall CreateWithWidthAndHeightAndDpi(void*, float, float, float, void**) noexcept = 0;
            virtual int32_t __stdcall CreateWithWidthAndHeightAndDpiAndAlphaMode(void*, float, float, float, int32_t, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl
    {
        auto CreateResources(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedControl, winrt::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs> const& value) const;
        using CreateResources_revoker = impl::event_revoker<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl, &impl::abi_t<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl>::remove_CreateResources>;
        [[nodiscard]] auto CreateResources(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedControl, winrt::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs> const& value) const;
        auto CreateResources(winrt::event_token const& token) const noexcept;
        auto Update(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedUpdateEventArgs> const& value) const;
        using Update_revoker = impl::event_revoker<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl, &impl::abi_t<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl>::remove_Update>;
        [[nodiscard]] auto Update(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedUpdateEventArgs> const& value) const;
        auto Update(winrt::event_token const& token) const noexcept;
        auto Draw(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedDrawEventArgs> const& value) const;
        using Draw_revoker = impl::event_revoker<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl, &impl::abi_t<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl>::remove_Draw>;
        [[nodiscard]] auto Draw(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedDrawEventArgs> const& value) const;
        auto Draw(winrt::event_token const& token) const noexcept;
        auto GameLoopStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl, winrt::Windows::Foundation::IInspectable> const& value) const;
        using GameLoopStarting_revoker = impl::event_revoker<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl, &impl::abi_t<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl>::remove_GameLoopStarting>;
        [[nodiscard]] auto GameLoopStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl, winrt::Windows::Foundation::IInspectable> const& value) const;
        auto GameLoopStarting(winrt::event_token const& token) const noexcept;
        auto GameLoopStopped(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl, winrt::Windows::Foundation::IInspectable> const& value) const;
        using GameLoopStopped_revoker = impl::event_revoker<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl, &impl::abi_t<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl>::remove_GameLoopStopped>;
        [[nodiscard]] auto GameLoopStopped(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl, winrt::Windows::Foundation::IInspectable> const& value) const;
        auto GameLoopStopped(winrt::event_token const& token) const noexcept;
        [[nodiscard]] auto ReadyToDraw() const;
        auto IsFixedTimeStep(bool value) const;
        [[nodiscard]] auto IsFixedTimeStep() const;
        auto TargetElapsedTime(winrt::Windows::Foundation::TimeSpan const& value) const;
        [[nodiscard]] auto TargetElapsedTime() const;
        auto Paused(bool value) const;
        [[nodiscard]] auto Paused() const;
        auto ClearColor(winrt::Windows::UI::Color const& value) const;
        [[nodiscard]] auto ClearColor() const;
        [[nodiscard]] auto Size() const;
        auto Invalidate() const;
        auto ResetElapsedTime() const;
        auto CreateCoreIndependentInputSource(winrt::Windows::UI::Core::CoreInputDeviceTypes const& deviceTypes) const;
        auto RemoveFromVisualTree() const;
        [[nodiscard]] auto HasGameLoopThreadAccess() const;
        auto RunOnGameLoopThreadAsync(winrt::Windows::UI::Core::DispatchedHandler const& agileCallback) const;
        [[nodiscard]] auto UseSharedDevice() const;
        auto UseSharedDevice(bool value) const;
        [[nodiscard]] auto ForceSoftwareRenderer() const;
        auto ForceSoftwareRenderer(bool value) const;
        [[nodiscard]] auto CustomDevice() const;
        auto CustomDevice(winrt::Microsoft::Graphics::Canvas::CanvasDevice const& value) const;
        [[nodiscard]] auto DpiScale() const;
        auto DpiScale(float ratio) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedDrawEventArgs
    {
        [[nodiscard]] auto DrawingSession() const;
        [[nodiscard]] auto Timing() const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedDrawEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedDrawEventArgsFactory
    {
        auto Create(winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession const& canvasDrawingSession, winrt::Microsoft::Graphics::Canvas::UI::CanvasTimingInformation const& timingInformation) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedDrawEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedUpdateEventArgs
    {
        [[nodiscard]] auto Timing() const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedUpdateEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedUpdateEventArgsFactory
    {
        auto Create(winrt::Microsoft::Graphics::Canvas::UI::CanvasTimingInformation const& timingInformation) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedUpdateEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl
    {
        auto CreateResources(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl, winrt::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs> const& value) const;
        using CreateResources_revoker = impl::event_revoker<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl, &impl::abi_t<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl>::remove_CreateResources>;
        [[nodiscard]] auto CreateResources(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl, winrt::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs> const& value) const;
        auto CreateResources(winrt::event_token const& token) const noexcept;
        [[nodiscard]] auto ReadyToDraw() const;
        auto Draw(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs> const& value) const;
        using Draw_revoker = impl::event_revoker<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl, &impl::abi_t<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl>::remove_Draw>;
        [[nodiscard]] auto Draw(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs> const& value) const;
        auto Draw(winrt::event_token const& token) const noexcept;
        auto ClearColor(winrt::Windows::UI::Color const& value) const;
        [[nodiscard]] auto ClearColor() const;
        auto Invalidate() const;
        [[nodiscard]] auto Size() const;
        auto RemoveFromVisualTree() const;
        [[nodiscard]] auto UseSharedDevice() const;
        auto UseSharedDevice(bool value) const;
        [[nodiscard]] auto ForceSoftwareRenderer() const;
        auto ForceSoftwareRenderer(bool value) const;
        [[nodiscard]] auto CustomDevice() const;
        auto CustomDevice(winrt::Microsoft::Graphics::Canvas::CanvasDevice const& value) const;
        [[nodiscard]] auto DpiScale() const;
        auto DpiScale(float ratio) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgs
    {
        [[nodiscard]] auto DrawingSession() const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgsFactory
    {
        auto Create(winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession const& canvasDrawingSession) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSource
    {
        auto CreateDrawingSession(winrt::Windows::UI::Color const& clearColor) const;
        auto CreateDrawingSession(winrt::Windows::UI::Color const& clearColor, winrt::Windows::Foundation::Rect const& updateRectangle) const;
        auto Recreate(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& value) const;
        [[nodiscard]] auto Size() const;
        [[nodiscard]] auto SizeInPixels() const;
        [[nodiscard]] auto AlphaMode() const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSourceFactory
    {
        auto CreateWithSize(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, winrt::Windows::Foundation::Size const& size) const;
        auto CreateWithWidthAndHeight(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, float width, float height) const;
        auto CreateWithWidthAndHeightAndDpi(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi) const;
        auto CreateWithWidthAndHeightAndDpiAndAlphaMode(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi, winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasRegionsInvalidatedEventArgs
    {
        [[nodiscard]] auto InvalidatedRegions() const;
        [[nodiscard]] auto VisibleRegion() const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasRegionsInvalidatedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasSwapChainPanel
    {
        auto SwapChain(winrt::Microsoft::Graphics::Canvas::CanvasSwapChain const& value) const;
        [[nodiscard]] auto SwapChain() const;
        auto RemoveFromVisualTree() const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasSwapChainPanel>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasSwapChainPanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl
    {
        auto CreateResources(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl, winrt::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs> const& value) const;
        using CreateResources_revoker = impl::event_revoker<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl, &impl::abi_t<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl>::remove_CreateResources>;
        [[nodiscard]] auto CreateResources(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl, winrt::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs> const& value) const;
        auto CreateResources(winrt::event_token const& token) const noexcept;
        [[nodiscard]] auto ReadyToDraw() const;
        auto RegionsInvalidated(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs> const& value) const;
        using RegionsInvalidated_revoker = impl::event_revoker<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl, &impl::abi_t<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl>::remove_RegionsInvalidated>;
        [[nodiscard]] auto RegionsInvalidated(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs> const& value) const;
        auto RegionsInvalidated(winrt::event_token const& token) const noexcept;
        auto ClearColor(winrt::Windows::UI::Color const& value) const;
        [[nodiscard]] auto ClearColor() const;
        auto CreateDrawingSession(winrt::Windows::Foundation::Rect const& updateRectangle) const;
        auto SuspendDrawingSession(winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession const& drawingSession) const;
        auto ResumeDrawingSession(winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession const& drawingSession) const;
        auto Invalidate() const;
        auto Invalidate(winrt::Windows::Foundation::Rect const& region) const;
        [[nodiscard]] auto Size() const;
        auto RemoveFromVisualTree() const;
        [[nodiscard]] auto UseSharedDevice() const;
        auto UseSharedDevice(bool value) const;
        [[nodiscard]] auto ForceSoftwareRenderer() const;
        auto ForceSoftwareRenderer(bool value) const;
        [[nodiscard]] auto CustomDevice() const;
        auto CustomDevice(winrt::Microsoft::Graphics::Canvas::CanvasDevice const& value) const;
        [[nodiscard]] auto DpiScale() const;
        auto DpiScale(float ratio) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource
    {
        [[nodiscard]] auto Source() const;
        auto CreateDrawingSession(winrt::Windows::UI::Color const& clearColor, winrt::Windows::Foundation::Rect const& updateRectangle) const;
        auto SuspendDrawingSession(winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession const& drawingSession) const;
        auto ResumeDrawingSession(winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession const& drawingSession) const;
        auto Invalidate() const;
        auto Invalidate(winrt::Windows::Foundation::Rect const& region) const;
        auto RaiseRegionsInvalidatedIfAny() const;
        auto RegionsInvalidated(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs> const& value) const;
        using RegionsInvalidated_revoker = impl::event_revoker<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource, &impl::abi_t<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource>::remove_RegionsInvalidated>;
        [[nodiscard]] auto RegionsInvalidated(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource, winrt::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs> const& value) const;
        auto RegionsInvalidated(winrt::event_token const& token) const noexcept;
        auto Resize(winrt::Windows::Foundation::Size const& size) const;
        auto Resize(float width, float height) const;
        auto Resize(float width, float height, float dpi) const;
        auto Recreate(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator) const;
        [[nodiscard]] auto Size() const;
        [[nodiscard]] auto SizeInPixels() const;
        [[nodiscard]] auto AlphaMode() const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSourceFactory
    {
        auto CreateWithSize(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, winrt::Windows::Foundation::Size const& size) const;
        auto CreateWithWidthAndHeight(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, float width, float height) const;
        auto CreateWithWidthAndHeightAndDpi(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi) const;
        auto CreateWithWidthAndHeightAndDpiAndAlphaMode(winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi, winrt::Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSourceFactory<D>;
    };
}
#endif
